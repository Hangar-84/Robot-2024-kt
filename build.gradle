import edu.wpi.first.gradlerio.GradleRIOPlugin
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.9.23"
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
    id "idea"
}

def javaVersion = JavaVersion.VERSION_21

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

def ROBOT_MAIN_CLASS = "org.hangar84.robot_2024.MainKt"


deploy {
    //noinspection GroovyAssignabilityCheck
    targets {
        roborio(getTargetTypeClass("RoboRIO")) {
            team = project.frc.getTeamOrDefault(7271)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass("FRCJavaArtifact")) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass("FileTreeArtifact")) {
                    files = project.fileTree("src/main/deploy")
                    directory = "/home/lvuser/deploy"
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni.set(false)

// Set this to true to enable desktop support.
def includeDesktopSupport = true

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

wpi.sim.addGui().defaultEnabled.set(true)
wpi.sim.addDriverstation()

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add "-XDstringConcat=inline"
}

kotlin {
    compilerOptions {
        jvmTarget.set(JvmTarget.@Companion.fromTarget(javaVersion.toString()))
        // https://kotlinlang.org/docs/gradle-configure-project.html#gradle-java-toolchains-support
        jvmToolchain(Integer.valueOf(javaVersion.toString()))
    }
}

idea {
    project {
        // The project.sourceCompatibility setting is not always picked up, so we set explicitly
        languageLevel = javaVersion
    }
    module {
        // Improve development & (especially) debugging experience (and IDEA"s capabilities) by having libraries" source & javadoc attached
        downloadJavadoc = true
        downloadSources = true
        // Exclude the .vscode directory from indexing and search
        excludeDirs += file(".vscode")
    }
}